package ourLib.dbUtils;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.LinkedList;

import ourLib.AppException;



@FunctionalInterface
interface ParamterAdder{
	public void apply(Integer index,PreparedStatement st ) throws AppException;
}

public class StatementWrapper {
		private String query;
		private LinkedList<ParamterAdder> paramterAdders;

	

		public StatementWrapper(String _query) {
			this.query= _query;
			paramterAdders= new LinkedList<ParamterAdder>();
		}
		
		
		public PreparedStatement makeStatement(Connection con, int autoGeneratedKey) throws AppException {
			try {
				PreparedStatement st= con.prepareStatement(query, autoGeneratedKey);
				int index=1;
				for(ParamterAdder lambda: paramterAdders) {
					lambda.apply(index, st);
					index++;
				}
				return st;
			}
			catch(SQLException e) { throw new AppException(e.getMessage(), 500); }
			
		}

		public PreparedStatement makeStatement(Connection con) throws AppException{
			return makeStatement(con, PreparedStatement.NO_GENERATED_KEYS);
		}
		
		//Se mapea el parametro del preparedStament ('?'), con el valor del String que se envio al metodo
		//Si se invocan los push en orden de los parametros ('?'), el index se autoincrementa .
		public StatementWrapper push(String s) {
			paramterAdders.add((index, st)->{
				try { 
					if(s==null) {st.setNull(index, Types.VARCHAR); }
					else { st.setString(index, s); } 
					} 
				catch (SQLException e) { throw new AppException(e.getMessage(), 500); }
			});
			return this;
		}
		//Se mapea el parametro del preparedStament ('?'), con el valor del Integer que se envio al metodo
		//Si se invocan los push en orden de los parametros ('?'), el index se autoincrementa .
		public StatementWrapper push(Integer i)  {
			paramterAdders.add((index, st)->{
				try { 
					if(i==null) {st.setNull(index, Types.INTEGER); }
					else {st.setInt(index, i); }
				 } 
				catch (SQLException e) { throw new AppException(e.getMessage(), 500); }
			});
			return this;
		}
		
		//Se mapea el parametro del preparedStament ('?'), con el valor del Boolean que se envio al metodo
		//Si se invocan los push en orden de los parametros ('?'), el index se autoincrementa .
		public StatementWrapper push(Boolean b) {
			paramterAdders.add((index, st)->{
				try { 
					if(b==null) {st.setNull(index, Types.BOOLEAN); }
					else {st.setBoolean(index, b);}
				} 
				catch (SQLException e) { throw new AppException(e.getMessage(), 500); }
			});
			return this;
		}

		//Se mapea el parametro del preparedStament ('?'), con el valor del Double que se envio al metodo
		//Si se invocan los push en orden de los parametros ('?'), el index se autoincrementa .
		public StatementWrapper push(Double d) {
			paramterAdders.add((index, st)->{
				try { 
					if(d==null) {st.setNull(index, Types.DOUBLE); }
					else{ st.setDouble(index, d); } 
					} 
				catch (SQLException e) { throw new AppException(e.getMessage(), 500); }
			});
			return this;
		}
		//Se mapea el parametro del preparedStament ('?'), con el valor de la Fecha que se envio al metodo
		//Si se invocan los push en orden de los parametros ('?'), el index se autoincrementa .
		public StatementWrapper push(LocalDate d) {
			paramterAdders.add((index, st)->{
				try { 
					if(d==null) {st.setNull(index, Types.TIMESTAMP); }
					else {st.setObject(index, d); }
					} 
				catch (SQLException e) { throw new AppException(e.getMessage(), 500); }
			});
			return this;
		}
		
		
		public StatementWrapper push(LocalDateTime d) {
			paramterAdders.add((index, st)->{
				try { 
					if(d==null) {st.setNull(index, Types.TIMESTAMP); }
					else {st.setObject(index, d); }
				} 
				catch (SQLException e) { throw new AppException(e.getMessage(), 500); }
			});
			return this;
		}
		
		
		
}
		
		
		
	

